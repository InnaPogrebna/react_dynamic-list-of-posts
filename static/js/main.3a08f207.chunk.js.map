{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","getSelectedPostId","selectedPostId","className","map","post","userId","title","body","type","onClick","id","NewCommentForm","commentsLength","addComment","useState","newId","setNewId","newName","setNewName","newEmail","setNewEmail","newText","setNewText","handleChange","setInput","event","target","value","onSubmit","preventDefault","prev","name","postId","email","placeholder","required","onChange","request","url","option","a","fetch","response","json","PostDetails","postDetail","setPostDetail","comments","setComments","visibleComments","setVisibleComments","useEffect","then","getDeleteComment","commentId","method","deleteComment","filter","comment","prevState","length","newComment","currentCom","headers","JSON","stringify","createComment","App","setPosts","users","setUsers","selectedUser","setSelectedUser","setSelectedPostId","user","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a08f207.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  getSelectedPostId: (postId:number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  getSelectedPostId,\n  selectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                [User]\n                {' '}\n                {post.userId}\n                :\n                {' '}\n              </b>\n              {post.title}\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => getSelectedPostId(post.id)}\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../types/comment';\n\ntype Props = {\n  selectedPostId: number,\n  commentsLength:number,\n  addComment: (newComment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  commentsLength,\n  addComment,\n}) => {\n  const [newId, setNewId] = useState(commentsLength);\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newText, setNewText] = useState('');\n\n  const handleChange = (\n    setInput: (value: string) => void,\n    event:React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    setInput(event.target.value);\n  };\n\n  const resetForm = () => {\n    setNewName('');\n    setNewEmail('');\n    setNewText('');\n  };\n\n  const handleSubmit = (event:React.FormEvent) => {\n    event.preventDefault();\n    setNewId((prev) => prev + 1);\n\n    if (newName && newEmail && newText) {\n      const newComment: Comment = {\n        id: newId,\n        name: newName,\n        postId: selectedPostId,\n        email: newEmail,\n        body: newText,\n      };\n\n      addComment(newComment);\n      resetForm();\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          required\n          onChange={(value) => handleChange(setNewName, value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newEmail}\n          required\n          onChange={(value) => handleChange(setNewEmail, value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newText}\n          required\n          onChange={(value) => handleChange(setNewText, value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, option?:{}) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    return await response.json();\n  } catch (error) {\n    return 'Error';\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetail } from '../../api/posts';\nimport {\n  getPostComments,\n  deleteComment,\n  createComment,\n} from '../../api/comments';\nimport { Post } from '../../types/post';\nimport { Comment } from '../../types/comment';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetail, setPostDetail] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [visibleComments, setVisibleComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetail(selectedPostId)\n      .then(response => {\n        return setPostDetail(response);\n      });\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(response => {\n        return setComments(response);\n      });\n  }, [selectedPostId]);\n\n  const getDeleteComment = (commentId:number) => {\n    deleteComment(commentId);\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const addComment = (newComment: Comment) => {\n    setComments(currentCom => [...currentCom, newComment]);\n    createComment(newComment);\n  };\n\n  const getVisibleComments = () => {\n    setVisibleComments((prevState) => !prevState);\n  };\n\n  const toggleBtnComments = () => {\n    if (comments.length === 0) {\n      return 'No comments yet';\n    }\n\n    if (!visibleComments && comments.length > 0) {\n      return `Show ${comments.length} comments`;\n    }\n\n    return `Hide ${comments.length} comments`;\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {selectedPostId\n        ? (\n          <>\n            <h2>\n              Post details:\n              {postDetail?.userId}\n            </h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{postDetail?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={getVisibleComments}\n              >\n                {toggleBtnComments()}\n              </button>\n\n              {visibleComments\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => getDeleteComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                ) }\n            </section>\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  selectedPostId={selectedPostId}\n                  commentsLength={comments.length}\n                  addComment={addComment}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : 'No posts details yet' }\n    </div>\n  );\n};\n","import { request } from './api';\nimport { Post } from '../types/post';\n\nexport const getUserPosts = (userId?:number): Promise<Post[]> => {\n  if (userId) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n};\n\nexport const getPostDetail = (postId: number):Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import { request } from './api';\nimport { Comment } from '../types/comment';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId:number) => {\n  return request(`/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const createComment = (newComment:Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/post';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/user';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const getChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(Number(event.target.value));\n  };\n\n  const getSelectedPostId = (postId:number) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(response => {\n        return setUsers(response);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(selectedUser)\n      .then(response => {\n        if (selectedUser !== 0) {\n          setPosts(response.filter(user => user.id === selectedUser));\n        } else {\n          setPosts(response);\n        }\n      });\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={getChangeSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value=\"1\"\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            getSelectedPostId={getSelectedPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\nimport { User } from '../types/user';\n\nexport const getUsers = ():Promise<User[]> => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}