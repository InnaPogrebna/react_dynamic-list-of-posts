{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostsList","posts","getSelectedPostId","selectedPostId","className","map","post","userId","title","body","type","onClick","id","NewCommentForm","commentsLength","addComment","useState","newId","setNewId","name","email","createComment","setCreateComment","handleChange","event","target","value","prevState","onSubmit","preventDefault","prev","newComment","postId","placeholder","required","onChange","request","url","option","a","fetch","response","json","PostDetails","postDetail","setPostDetail","comments","setComments","visibleComments","setVisibleComments","useEffect","then","getDeleteComment","commentId","method","deleteComment","filter","comment","length","currentCom","headers","JSON","stringify","App","setPosts","users","setUsers","selectedUser","setSelectedUser","setSelectedPostId","user","Number","ReactDOM","render","document","getElementById"],"mappings":"8TAUaA,EAA6B,SAAC,GAIpC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,eAEA,OACE,sBAAKC,UAAU,YAAf,UACE,wCAEA,oBAAIA,UAAU,kBAAd,SACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACEF,UAAU,kBADZ,UAIE,gCACE,uCAEG,IACAE,EAAKC,OAHR,IAKG,OAEFD,EAAKE,MACLF,EAAKG,QAER,wBACEC,KAAK,SACLN,UAAU,2BACVO,QAAS,kBAAMT,EAAkBI,EAAKM,KAHxC,SAKIT,IAAmBG,EAAKM,GAAM,QAAU,WAlBvCN,EAAKM,a,sBCbTC,G,MAAkC,SAAC,GAIzC,IAHLV,EAGI,EAHJA,eACAW,EAEI,EAFJA,eACAC,EACI,EADJA,WAEA,EAA0BC,mBAASF,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEA,EAA0CF,mBAAS,CACjDG,KAAM,GACNC,MAAO,GACPX,KAAM,KAHR,mBAAOY,EAAP,KAAsBC,EAAtB,KAMMC,EAAe,SACnBC,GAEA,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MAEdJ,GAAiB,SAAAK,GAAS,kCACrBA,GADqB,kBAEvBR,EAAOO,QA4BZ,OACE,uBACEtB,UAAU,iBACVwB,SAnBiB,SAACJ,GAIpB,GAHAA,EAAMK,iBACNX,GAAS,SAACY,GAAD,OAAUA,EAAO,KAEtBT,EAAe,CACjB,IAAMU,EAAmB,aACvBnB,GAAIK,EACJe,OAAQ7B,GACLkB,GAGLN,EAAWgB,GAlBbT,EAAiB,CACfH,KAAM,GACNC,MAAO,GACPX,KAAM,OAqBR,UAIE,qBAAKL,UAAU,aAAf,SACE,uBACEM,KAAK,OACLS,KAAK,OACLc,YAAY,YACZ7B,UAAU,wBACVsB,MAAOL,EAAcF,KACrBe,UAAQ,EACRC,SAAUZ,MAId,qBAAKnB,UAAU,aAAf,SACE,uBACEM,KAAK,OACLS,KAAK,QACLc,YAAY,aACZ7B,UAAU,wBACVsB,MAAOL,EAAcD,MACrBc,UAAQ,EACRC,SAAUZ,MAId,qBAAKnB,UAAU,aAAf,SACE,0BACEe,KAAK,OACLc,YAAY,oBACZ7B,UAAU,wBACVsB,MAAOL,EAAcZ,KACrByB,UAAQ,EACRC,SAAUZ,MAId,wBACEb,KAAK,SACLN,UAAU,uCAFZ,gC,gCChGOgC,EAAO,uCAAG,WAAOC,EAAaC,GAApB,eAAAC,EAAA,+EAEIC,MAAM,GAAD,OAJR,qCAIQ,OAAeH,GAAOC,GAF/B,cAEbG,EAFa,gBAINA,EAASC,OAJH,iGAMZ,SANY,yDAAH,wDCcPC,EAA+B,SAAC,GAAwB,IAAtBxC,EAAqB,EAArBA,eAC7C,EAAoCa,mBAAsB,MAA1D,mBAAO4B,EAAP,KAAmBC,EAAnB,KACA,EAAgC7B,mBAAoB,IAApD,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAA8C/B,oBAAS,GAAvD,mBAAOgC,EAAP,KAAwBC,EAAxB,KAEAC,qBAAU,WCViB,IAAClB,KDWZ7B,ECVTiC,EAAQ,UAAD,OAAWJ,KDWpBmB,MAAK,SAAAV,GACJ,OAAOI,EAAcJ,QAExB,CAACtC,IAEJ+C,qBAAU,WEzBmB,IAAClB,KF0BZ7B,EEzBXiC,EAAQ,oBAAD,OAAqBJ,KF0B9BmB,MAAK,SAAAV,GACJ,OAAOM,EAAYN,QAEtB,CAACtC,IAEJ,IAAMiD,EAAmB,SAACC,IE5BC,SAACA,GACrBjB,EAAQ,aAAD,OAAciB,GAAa,CAAEC,OAAQ,WF4BjDC,CAAcF,GACdN,EAAYD,EAASU,QAAO,SAAAC,GAAO,OAAIA,EAAQ7C,KAAOyC,OAoBxD,OACE,qBAAKjD,UAAU,cAAf,SACGD,EAEG,qCACE,sDAEGyC,QAFH,IAEGA,OAFH,EAEGA,EAAYrC,UAGf,yBAASH,UAAU,oBAAnB,SACE,mCAAIwC,QAAJ,IAAIA,OAAJ,EAAIA,EAAYpC,UAGlB,0BAASJ,UAAU,wBAAnB,UACyB,IAApB0C,EAASY,OACR,kDAEA,wBACEhD,KAAK,SACLN,UAAU,SACVO,QAjCS,WACzBsC,GAAmB,SAACtB,GAAD,OAAgBA,MA6BrB,UAzBTqB,GAAmBF,EAASY,OAAS,EAClC,QAAN,OAAeZ,EAASY,OAAxB,aAGI,QAAN,OAAeZ,EAASY,OAAxB,eA6BWV,GAEG,oBAAI5C,UAAU,oBAAd,SACG0C,EAASzC,KAAI,SAAAoD,GAAO,OACnB,qBACErD,UAAU,yBADZ,UAIE,wBACEM,KAAK,SACLN,UAAU,oCACVO,QAAS,kBAAMyC,EAAiBK,EAAQ7C,KAH1C,eAOA,4BAAI6C,EAAQhD,SATPgD,EAAQ7C,YAezB,kCACE,qBAAKR,UAAU,4BAAf,SACE,cAAC,EAAD,CACED,eAAgBA,EAChBW,eAAgBgC,EAASY,OACzB3C,WArEG,SAACgB,GAClBgB,GAAY,SAAAY,GAAU,4BAAQA,GAAR,CAAoB5B,OE9BjB,SAACA,GACrBK,EAAQ,YAAa,CAC1BkB,OAAQ,OACRM,QAAS,CACP,eAAgB,mCAElBnD,KAAMoD,KAAKC,UAAU/B,KFyBrBV,CAAcU,aAyER,0BG7BKgC,EA5EO,WACpB,MAA0B/C,mBAAiB,IAA3C,mBAAOf,EAAP,KAAc+D,EAAd,KACA,EAA0BhD,mBAAiB,IAA3C,mBAAOiD,EAAP,KAAcC,EAAd,KACA,EAAwClD,mBAAS,GAAjD,mBAAOmD,EAAP,KAAqBC,EAArB,KACA,EAA4CpD,mBAAS,GAArD,mBAAOb,EAAP,KAAuBkE,EAAvB,KAgCA,OAlBAnB,qBAAU,WCxBHd,EAAQ,UD0BVe,MAAK,SAAAV,GACJ,OAAOyB,EAASzB,QAEnB,IAEHS,qBAAU,WFhCgB,IAAC3C,KEiCZ4D,EF/BN/B,EADL7B,EACa,iBAAD,OAAkBA,GAGnB,WE6BV4C,MAAK,SAAAV,GAEFuB,EADmB,IAAjBG,EACO1B,EAASe,QAAO,SAAAc,GAAI,OAAIA,EAAK1D,KAAOuD,KAEpC1B,QAGd,CAAC0B,IAGF,sBAAK/D,UAAU,MAAf,UACE,wBAAQA,UAAU,cAAlB,SACE,wDAGE,yBACEA,UAAU,qBACV+B,SAtCc,SAACX,GACvB4C,EAAgBG,OAAO/C,EAAMC,OAAOC,SAmC9B,UAIE,wBAAQA,MAAM,IAAd,uBACCuC,EAAM5D,KAAI,SAAAiE,GAAI,OACb,iCAGGA,EAAKnD,MAFDmD,EAAK1D,eASpB,uBAAMR,UAAU,YAAhB,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEH,MAAOA,EACPE,eAAgBA,EAChBD,kBArDgB,SAAC8B,GAEvBqC,EADElE,IAAmB6B,EACH,EAEAA,QAoDhB,qBAAK5B,UAAU,eAAf,SACE,cAAC,EAAD,CACED,eAAgBA,aE1E5BqE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2f532577.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  getSelectedPostId: (postId:number) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  getSelectedPostId,\n  selectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                [User]\n                {' '}\n                {post.userId}\n                :\n                {' '}\n              </b>\n              {post.title}\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => getSelectedPostId(post.id)}\n            >\n              {(selectedPostId === post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../types/comment';\n\ntype Props = {\n  selectedPostId: number,\n  commentsLength:number,\n  addComment: (newComment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  commentsLength,\n  addComment,\n}) => {\n  const [newId, setNewId] = useState(commentsLength);\n\n  const [createComment, setCreateComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const handleChange = (\n    event:React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setCreateComment(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const resetForm = () => {\n    setCreateComment({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = (event:React.FormEvent) => {\n    event.preventDefault();\n    setNewId((prev) => prev + 1);\n\n    if (createComment) {\n      const newComment: Comment = {\n        id: newId,\n        postId: selectedPostId,\n        ...createComment,\n      };\n\n      addComment(newComment);\n      resetForm();\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={createComment.name}\n          required\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={createComment.email}\n          required\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={createComment.body}\n          required\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, option?:{}) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    return await response.json();\n  } catch (error) {\n    return 'Error';\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetail } from '../../api/posts';\nimport {\n  getPostComments,\n  deleteComment,\n  createComment,\n} from '../../api/comments';\nimport { Post } from '../../types/post';\nimport { Comment } from '../../types/comment';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetail, setPostDetail] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [visibleComments, setVisibleComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetail(selectedPostId)\n      .then(response => {\n        return setPostDetail(response);\n      });\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(response => {\n        return setComments(response);\n      });\n  }, [selectedPostId]);\n\n  const getDeleteComment = (commentId:number) => {\n    deleteComment(commentId);\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  const addComment = (newComment: Comment) => {\n    setComments(currentCom => [...currentCom, newComment]);\n    createComment(newComment);\n  };\n\n  const getVisibleComments = () => {\n    setVisibleComments((prevState) => !prevState);\n  };\n\n  const toggleBtnComments = () => {\n    if (!visibleComments && comments.length > 0) {\n      return `Show ${comments.length} comments`;\n    }\n\n    return `Hide ${comments.length} comments`;\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {selectedPostId\n        ? (\n          <>\n            <h2>\n              Post details:\n              {postDetail?.userId}\n            </h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{postDetail?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              { (comments.length === 0)\n                ? <p> No comments yet </p>\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={getVisibleComments}\n                  >\n                    {toggleBtnComments()}\n                  </button>\n                ) }\n              {visibleComments\n                && (\n                  <ul className=\"PostDetails__list\">\n                    {comments.map(comment => (\n                      <li\n                        className=\"PostDetails__list-item\"\n                        key={comment.id}\n                      >\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => getDeleteComment(comment.id)}\n                        >\n                          X\n                        </button>\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                ) }\n            </section>\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  selectedPostId={selectedPostId}\n                  commentsLength={comments.length}\n                  addComment={addComment}\n                />\n              </div>\n            </section>\n          </>\n        )\n        : 'No posts details yet' }\n    </div>\n  );\n};\n","import { request } from './api';\nimport { Post } from '../types/post';\n\nexport const getUserPosts = (userId?:number): Promise<Post[]> => {\n  if (userId) {\n    return request(`/posts?userId=${userId}`);\n  }\n\n  return request('/posts');\n};\n\nexport const getPostDetail = (postId: number):Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import { request } from './api';\nimport { Comment } from '../types/comment';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId:number) => {\n  return request(`/comments/${commentId}`, { method: 'DELETE' });\n};\n\nexport const createComment = (newComment:Comment) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/post';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/user';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const getChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(Number(event.target.value));\n  };\n\n  const getSelectedPostId = (postId:number) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then(response => {\n        return setUsers(response);\n      });\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(selectedUser)\n      .then(response => {\n        if (selectedUser !== 0) {\n          setPosts(response.filter(user => user.id === selectedUser));\n        } else {\n          setPosts(response);\n        }\n      });\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={getChangeSelect}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            getSelectedPostId={getSelectedPostId}\n          />\n        </div>\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\nimport { User } from '../types/user';\n\nexport const getUsers = ():Promise<User[]> => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}